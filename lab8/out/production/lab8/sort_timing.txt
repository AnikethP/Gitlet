Q: Is one sorting algorithm always faster than another?
A: No, as the dataset grows there tends to be a more significant difference.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Theta(N^2) refers to the worst possible case. These sorting algorithms still have different implementations which result in different results based on dataset size.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: We can find how each algorithm performs compared to one another.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Relatively yes, but not always. Small increases in array sizes sometimes have shorter times due to the random array generated.

Q: How does changing nrepeats change the plot?
A: Increasing nrepeats lowers the amount of outliers.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, since there is a random array generated, each algorithm performs differently.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: